# -*- coding: utf-8 -*-
"""Stock Price Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lfPN9nFxQsLLELF0b287j_tPfM7cDfFu
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sb

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from xgboost import XGBClassifier
from sklearn import metrics

import warnings
warnings.filterwarnings('ignore')

df = pd.read_csv('/content/TSLA.csv')
df.head()

df.shape

df.describe()

df.info()

plt.figure(figsize=(15,5))
plt.plot(df['Close'])
plt.title('Tesla Close price.', fontsize=15)
plt.ylabel('Price in dollars.')
plt.show()

df.head()

df[df['Close'] == df['Adj Close']].shape

df = df.drop(['Adj Close'], axis=1)

df.isnull().sum()

features = ['Open', 'High', 'Low', 'Close', 'Volume']

plt.subplots(figsize=(20,10))

for i, col in enumerate(features):
  plt.subplot(2,3,i+1)
  sb.distplot(df[col])
plt.show()

plt.subplots(figsize=(20,10))
for i, col in enumerate(features):
  plt.subplot(2,3,i+1)
  sb.boxplot(df[col])
plt.show()

splitted = df['Date'].str.split('-', expand=True)

df['day'] = splitted[1].astype('int')
df['month'] = splitted[0].astype('int')
df['year'] = splitted[2].astype('int')

df.head()

df['is_quarter_end'] = np.where(df['month']%3==0,1,0)
df.head()

data_grouped = df.groupby('year').mean()
plt.subplots(figsize=(20,10))

for i, col in enumerate(['Open', 'High', 'Low', 'Close']):
  plt.subplot(2,2,i+1)
  data_grouped[col].plot.bar()
plt.show()

df.groupby('is_quarter_end').mean()

df['open-close'] = df['Open'] - df['Close']
df['low-high'] = df['Low'] - df['High']
df['target'] = np.where(df['Close'].shift(-1) > df['Close'], 1, 0)

plt.pie(df['target'].value_counts().values,
		labels=[0, 1], autopct='%1.1f%%')
plt.show()

plt.figure(figsize=(10, 10))

# As our concern is with the highly
# correlated features only so, we will visualize
# our heatmap as per that criteria only.
sb.heatmap(df.corr() > 0.9, annot=True, cbar=False)
plt.show()

features = df[['open-close', 'low-high', 'is_quarter_end']]
target = df['target']

scaler = StandardScaler()
features = scaler.fit_transform(features)

X_train, X_valid, Y_train, Y_valid = train_test_split(
	features, target, test_size=0.1, random_state=2022)
print(X_train.shape, X_valid.shape)

models = [LogisticRegression(), SVC(
kernel='poly', probability=True), XGBClassifier()]

for i in range(3):
  models[i].fit(X_train, Y_train)

  print(f'{models[i]} : ')
  print('Training Accuracy : ', metrics.roc_auc_score(
    Y_train, models[i].predict_proba(X_train)[:,1]))
  print('Validation Accuracy : ', metrics.roc_auc_score(
    Y_valid, models[i].predict_proba(X_valid)[:,1]))
  print()

metrics.plot_confusion_matrix(models[0], X_valid, Y_valid)
plt.show()

"""AttributeError: module 'sklearn.metrics' has no attribute 'plot_confusion_matrix'
it is been deprecated from sklearn

Conclusion:
We can observe that the accuracy achieved by the state-of-the-art ML model is no better than simply guessing with a probability of 50%. Possible reasons for this may be the lack of data or using a very simple model to perform such a complex task as Stock Market prediction.

I have tried to make it more better
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from xgboost import XGBClassifier
from sklearn import metrics

# Load your dataset
df = pd.read_csv('/content/TSLA.csv')

# Data Preprocessing
# ... (You can include feature engineering, data cleaning, etc.)

# Feature Scaling
scaler = StandardScaler()
features = scaler.fit_transform(features)

# Data Splitting
X_train, X_valid, Y_train, Y_valid = train_test_split(features, target, test_size=0.1, random_state=2022)

# Model Development
model = XGBClassifier(n_estimators=100, max_depth=3, learning_rate=0.1)

model.fit(X_train, Y_train)

# Evaluation
train_accuracy = metrics.roc_auc_score(Y_train, model.predict_proba(X_train)[:, 1])
valid_accuracy = metrics.roc_auc_score(Y_valid, model.predict_proba(X_valid)[:, 1])

print(f'Training Accuracy: {train_accuracy}')
print(f'Validation Accuracy: {valid_accuracy}')

df.head(5)

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from xgboost import XGBClassifier
from sklearn import metrics
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.model_selection import GridSearchCV

# Load your dataset, perform initial data preprocessing, and feature engineering
# Replace this with your data loading and preprocessing steps
df = pd.read_csv('/content/TSLA.csv')
df = df.drop(['Adj Close'], axis=1)

# Feature engineering
df['open-close'] = df['Open'] - df['Close']
df['low-high'] = df['Low'] - df['High']
df['target'] = np.where(df['Close'].shift(-1) > df['Close'], 1, 0)

# Split the data into features and target
features = df[['open-close', 'low-high']]
target = df['target']

# Normalize the features
scaler = StandardScaler()
features = scaler.fit_transform(features)

# Split the data into training and validation sets
X_train, X_valid, Y_train, Y_valid = train_test_split(
    features, target, test_size=0.1, random_state=2022)

# Hyperparameter tuning using GridSearchCV
param_grid = {
    'max_depth': [3, 5, 7],
    'n_estimators': [50, 100, 200],
    'learning_rate': [0.01, 0.1, 0.2]
}

xgb = XGBClassifier()
grid_search = GridSearchCV(xgb, param_grid, cv=3)
grid_search.fit(X_train, Y_train)
best_xgb = grid_search.best_estimator_

# Ensemble multiple models
models = [best_xgb, RandomForestClassifier(), GradientBoostingClassifier()]

for model in models:
    model.fit(X_train, Y_train)
    print(f'{model} : ')
    train_accuracy = metrics.roc_auc_score(Y_train, model.predict_proba(X_train)[:, 1])
    valid_accuracy = metrics.roc_auc_score(Y_valid, model.predict_proba(X_valid)[:, 1])
    print(f'Training Accuracy: {train_accuracy}')
    print(f'Validation Accuracy: {valid_accuracy}')
    print()

# Combine predictions from multiple models using majority voting or averaging

# Evaluate the ensemble model

# Continue optimizing and experimenting with different techniques to improve accuracy

from sklearn.metrics import plot_confusion_matrix
import matplotlib.pyplot as plt

# Replace 'best_xgb' with your chosen model
plot_confusion_matrix(best_xgb, X_valid, Y_valid)
plt.show()

pip install -U scikit-learn

import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix

# Replace 'best_xgb' with your chosen model
y_pred = best_xgb.predict(X_valid)
cm = confusion_matrix(Y_valid, y_pred)

plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=["Predicted 0", "Predicted 1"], yticklabels=["Actual 0", "Actual 1"])
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()

